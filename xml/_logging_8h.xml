<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="_logging_8h" kind="file" language="C++">
    <compoundname>Logging.h</compoundname>
    <includes local="no">string</includes>
    <includes local="no">glm/glm.hpp</includes>
    <includedby refid="_application_settings_8cpp" local="yes">ApplicationSettings.cpp</includedby>
    <includedby refid="_file_handling_8cpp" local="yes">FileHandling.cpp</includedby>
    <includedby refid="_game_manager_8cpp" local="yes">GameManager.cpp</includedby>
    <includedby refid="_graphics_manager_8cpp" local="yes">GraphicsManager.cpp</includedby>
    <includedby refid="_level_8cpp" local="yes">Level.cpp</includedby>
    <includedby refid="_logging_8cpp" local="yes">Logging.cpp</includedby>
    <includedby refid="_main_8cpp" local="yes">Main.cpp</includedby>
    <includedby refid="_shader_8cpp" local="yes">Shader.cpp</includedby>
    <includedby refid="_win32_application_8cpp" local="yes">Win32Application.cpp</includedby>
    <incdepgraph>
      <node id="1">
        <label>Logging.h</label>
        <link refid="_logging_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>string</label>
      </node>
      <node id="3">
        <label>glm/glm.hpp</label>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="_logging_8h_1a66188295d5427976ebb2bb2b590f85a6" prot="public" static="no">
        <name>GameErr</name>
        <param><defname>x</defname></param>
        <initializer>(_GameErr((x), __FILE__, __LINE__))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Logging.h" line="33" column="9" bodyfile="Logging.h" bodystart="33" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="_logging_8h_1ac0a396c707c68eb09b5296cc1a0deb92" prot="public" static="no" mutable="no">
        <type>thread_local int</type>
        <definition>thread_local int errLine</definition>
        <argsstring></argsstring>
        <name>errLine</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Thread local variable for the last line an error appeared on. By calling the GameErr macro, this is set to the calling line </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Logging.h" line="10" column="25" bodyfile="Logging.cpp" bodystart="3" bodyend="-1" declfile="Logging.h" declline="10" declcolumn="25"/>
      </memberdef>
      <memberdef kind="variable" id="_logging_8h_1a6d4f217a8eb1fe60728a4bc85ab6f202" prot="public" static="no" mutable="no">
        <type>thread_local std::string</type>
        <definition>thread_local std::string errFile</definition>
        <argsstring></argsstring>
        <name>errFile</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Thread local variable for the last file an error appeared in. By calling the GameErr macro, this is set to the calling file </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Logging.h" line="15" column="33" bodyfile="Logging.cpp" bodystart="4" bodyend="-1" declfile="Logging.h" declline="15" declcolumn="33"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="_logging_8h_1ab6606e95dc21d7e3c31e1fab40258c50" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ShowError</definition>
        <argsstring>(std::string error, std::string errorCode)</argsstring>
        <name>ShowError</name>
        <param>
          <type>std::string</type>
          <declname>error</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>errorCode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Shows an error with an associated code. Code should ideally be an enum class member. Also prints errLine and errFile </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Logging.h" line="18" column="6" bodyfile="Logging.cpp" bodystart="15" bodyend="27" declfile="Logging.h" declline="18" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="_logging_8h_1a97b0a41c389a59d12d9a8da93d5dd5b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SimpleError</definition>
        <argsstring>(std::string error)</argsstring>
        <name>SimpleError</name>
        <param>
          <type>std::string</type>
          <declname>error</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Shows a simple error dialog box </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Logging.h" line="20" column="6" bodyfile="Logging.cpp" bodystart="29" bodyend="37" declfile="Logging.h" declline="20" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="_logging_8h_1ad2ff95f831227346140960e382da23f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Warn</definition>
        <argsstring>(std::string warning)</argsstring>
        <name>Warn</name>
        <param>
          <type>std::string</type>
          <declname>warning</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Shows a simple warning </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Logging.h" line="23" column="6" bodyfile="Logging.cpp" bodystart="39" bodyend="50" declfile="Logging.h" declline="23" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="_logging_8h_1a5c7dd6a8d5a1a94fdab2de1743322bc2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T _GameErr</definition>
        <argsstring>(T err, const char *file, int line)</argsstring>
        <name>_GameErr</name>
        <param>
          <type>T</type>
          <declname>err</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Used to set the errLine and errFile while also printing the error string for ShowError </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Logging.h" line="27" column="3" bodyfile="Logging.h" bodystart="27" bodyend="32"/>
      </memberdef>
      <memberdef kind="function" id="_logging_8h_1a2f788160779dfde788be072df052f0ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string vec3ToString</definition>
        <argsstring>(_In_ glm::vec3 in)</argsstring>
        <name>vec3ToString</name>
        <param>
          <type>_In_ glm::vec3</type>
          <declname>in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns a string representing the given vec3 in the format &quot;x, y, z&quot; </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Logging.h" line="36" column="13" bodyfile="Logging.cpp" bodystart="52" bodyend="55" declfile="Logging.h" declline="36" declcolumn="13"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;glm/glm.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>thread_local<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>errLine;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>thread_local<sp/>std::string<sp/>errFile;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ShowError(std::string<sp/>error,<sp/>std::string<sp/>errorCode);</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SimpleError(std::string<sp/>error);</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Warn(std::string<sp/>warning);</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="27"><highlight class="normal">T<sp/>_GameErr(T<sp/>err,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>file,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line)</highlight></codeline>
<codeline lineno="28"><highlight class="normal">{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>errLine<sp/>=<sp/>line;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>errFile<sp/>=<sp/>std::string(file);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>err;</highlight></codeline>
<codeline lineno="32"><highlight class="normal">}</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GameErr(x)<sp/>(_GameErr((x),<sp/>__FILE__,<sp/>__LINE__))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal">std::string<sp/>vec3ToString(_In_<sp/>glm::vec3<sp/>in);</highlight></codeline>
    </programlisting>
    <location file="Logging.h"/>
  </compounddef>
</doxygen>
