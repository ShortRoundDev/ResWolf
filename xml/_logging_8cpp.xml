<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="_logging_8cpp" kind="file" language="C++">
    <compoundname>Logging.cpp</compoundname>
    <includes refid="_logging_8h" local="yes">Logging.h</includes>
    <incdepgraph>
      <node id="2">
        <label>Logging.h</label>
        <link refid="_logging_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>string</label>
      </node>
      <node id="1">
        <label>Logging.cpp</label>
        <link refid="_logging_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>glm/glm.hpp</label>
      </node>
    </incdepgraph>
      <sectiondef kind="var">
      <memberdef kind="variable" id="_logging_8cpp_1ac0a396c707c68eb09b5296cc1a0deb92" prot="public" static="no" mutable="no">
        <type>thread_local int</type>
        <definition>thread_local int errLine</definition>
        <argsstring></argsstring>
        <name>errLine</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Thread local variable for the last line an error appeared on. By calling the GameErr macro, this is set to the calling line </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Logging.cpp" line="3" column="18" bodyfile="Logging.cpp" bodystart="3" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_logging_8cpp_1a6d4f217a8eb1fe60728a4bc85ab6f202" prot="public" static="no" mutable="no">
        <type>thread_local std::string</type>
        <definition>thread_local std::string errFile</definition>
        <argsstring></argsstring>
        <name>errFile</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Thread local variable for the last file an error appeared in. By calling the GameErr macro, this is set to the calling file </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Logging.cpp" line="4" column="26" bodyfile="Logging.cpp" bodystart="4" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="_logging_8cpp_1ab6606e95dc21d7e3c31e1fab40258c50" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ShowError</definition>
        <argsstring>(std::string error, std::string errorCode)</argsstring>
        <name>ShowError</name>
        <param>
          <type>std::string</type>
          <declname>error</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>errorCode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Shows an error with an associated code. Code should ideally be an enum class member. Also prints errLine and errFile </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Logging.cpp" line="15" column="6" bodyfile="Logging.cpp" bodystart="15" bodyend="27"/>
      </memberdef>
      <memberdef kind="function" id="_logging_8cpp_1a97b0a41c389a59d12d9a8da93d5dd5b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SimpleError</definition>
        <argsstring>(std::string error)</argsstring>
        <name>SimpleError</name>
        <param>
          <type>std::string</type>
          <declname>error</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Shows a simple error dialog box </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Logging.cpp" line="29" column="6" bodyfile="Logging.cpp" bodystart="29" bodyend="37"/>
      </memberdef>
      <memberdef kind="function" id="_logging_8cpp_1ad2ff95f831227346140960e382da23f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Warn</definition>
        <argsstring>(std::string warning)</argsstring>
        <name>Warn</name>
        <param>
          <type>std::string</type>
          <declname>warning</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Shows a simple warning </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Logging.cpp" line="39" column="6" bodyfile="Logging.cpp" bodystart="39" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="_logging_8cpp_1a2f788160779dfde788be072df052f0ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string vec3ToString</definition>
        <argsstring>(_In_ glm::vec3 in)</argsstring>
        <name>vec3ToString</name>
        <param>
          <type>_In_ glm::vec3</type>
          <declname>in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns a string representing the given vec3 in the format &quot;x, y, z&quot; </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Logging.cpp" line="52" column="13" bodyfile="Logging.cpp" bodystart="52" bodyend="55"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;Logging.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal">thread_local<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>errLine;</highlight></codeline>
<codeline lineno="4"><highlight class="normal">thread_local<sp/>std::string<sp/>errFile;</highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>CONSOLE_LOG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>WIN_LOG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>WIN32_LEAN_AND_MEAN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Windows.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ShowError(std::string<sp/>error,<sp/>std::string<sp/>errorCode)</highlight></codeline>
<codeline lineno="16"><highlight class="normal">{</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#ifdef<sp/>CONSOLE_LOG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;ERROR:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>error<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!errorCode.empty())</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/>errorCode<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#ifdef<sp/>WIN_LOG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>MessageBoxA(NULL,<sp/>(error<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal"><sp/>+<sp/>errorCode<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;\nAt<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::string(errFile)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;#&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(errLine)).c_str(),<sp/>NULL,<sp/>MB_OK);</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal">}</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SimpleError(std::string<sp/>error)</highlight></codeline>
<codeline lineno="30"><highlight class="normal">{</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#ifdef<sp/>CONSOLE_LOG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;ERROR:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>error<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#ifdef<sp/>WIN_LOG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>MessageBoxA(NULL,<sp/>error.c_str(),<sp/>NULL,<sp/>MB_OK);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal">}</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Warn(std::string<sp/>warning)</highlight></codeline>
<codeline lineno="40"><highlight class="normal">{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#ifndef<sp/>_DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#ifdef<sp/>CONSOLE_LOG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;WARNING:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>warning<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#ifdef<sp/>WIN_LOG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>MessageBoxA(NULL,<sp/>warning.c_str(),<sp/></highlight><highlight class="stringliteral">&quot;Warning&quot;</highlight><highlight class="normal">,<sp/>MB_OK);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal">}</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal">std::string<sp/>vec3ToString(_In_<sp/>glm::vec3<sp/>in)</highlight></codeline>
<codeline lineno="53"><highlight class="normal">{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::to_string(in.x)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(in.y)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(in.z);</highlight></codeline>
<codeline lineno="55"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="Logging.cpp"/>
  </compounddef>
</doxygen>
